"""
1588. 所有奇数长度子数组的和
给你一个正整数数组arr，请你计算所有可能的奇数长度子数组的和。

子数组 定义为原数组中的一个连续子序列。

请你返回 arr中 所有奇数长度子数组的和 。

示例 1：

输入：arr = [1,4,2,5,3]
输出：58
解释：所有奇数长度子数组和它们的和为：
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
示例 2：

输入：arr = [1,2]
输出：3
解释：总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。
示例 3：

输入：arr = [10,11,12]
输出：66


提示：

1 <= arr.length <= 100
1 <= arr[i] <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
from typing import List


class Solution:

    def sumOddLengthSubarrays(self, arr: List[int]) -> int:

        res, n = 0, len(arr)
        for i in range(n):
            # 按照规律, 计算出每个元素出现的次数求和即可
            res += ((i + 1) * (n - i) + 1) // 2 * arr[i]
            # print(arr[i], f"(({i} + 1) * ({n} - {i}) + 1) // 2 = {((i + 1) * (n - i) + 1) // 2}")
        return res


arr = [1, 2, 3, 4, 5]
arr = [1, 2, 3, 4, 5, 6,]
arr = [1, 2, 3, 4, 5, 6, 7,]
arr = [1, 2, 3, 4, 5, 6, 7, 8]
s = Solution()
print(s.sumOddLengthSubarrays(arr))

# len = 5, 57
# 1 : 3
# 2 : 4
# 3 : 5
# 4 : 4
# 5 : 3

# len = 6, 98
# 1: 3
# 2: 5
# 3: 6
# 4: 6
# 5: 5
# 6: 3

# len = 7, 176
# 1: 4
# 2: 6
# 3: 8
# 4: 8
# 5: 8
# 6: 6
# 7: 4

# len = 8, 270
# 1: 4
# 2: 7
# 3: 9
# 4: 10
# 5: 10
# 6: 9
# 7: 7
# 8: 4
